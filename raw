# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
print("---")
print("Updated damages")
print("---")

def convert_damages_data(damages):

  conversion = {"M": 1000000,
                "B": 1000000000}
  updated_damages = []

  for damage in damages:
    if damage == "Damages not recorded":
      updated_damages.append(damage)
    if damage[-1] == 'M':
      updated_damages.append(float(damage.strip('M'))*conversion['M'])
    if damage[-1] == 'B':
      updated_damages.append(float(damage.strip('B'))*conversion['B'])
  return updated_damages

updated_damages = convert_damages_data(damages)
print(updated_damages)


# 2 
# Write a function that constructs a dictionary made out of the lists, where the keys of the dictionary are the names of the hurricanes, and the values are dictionaries themselves containing a key for each piece of data
print("---")
print("Keys are names of hurricanes")
print("---")

def create_dictionary(names, months, years, max_sustained_winds, areas_affected, damages, deaths):

  hurricanes = {}
  num_hurricanes = len(names)

  for i in range(num_hurricanes):
    hurricanes[names[i]] = {
                  "Name": names[i],
                  "Month": months[i],
                  "Year": years[i],
                  "Max Sustained Wind": max_sustained_winds[i],
                  "Areas Affected": areas_affected[i],
                  "Damage": updated_damages[i],
                  "Deaths": deaths[i]
                  }
  return hurricanes
hurricanes = create_dictionary(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths)
print(hurricanes)



# 3
# convert the current dictionary of hurricanes to a new dictionary, where the keys are years and the values are lists
def hurricane_by_year_dict(year):
  hurricane_by_year = []
  for name in hurricanes:
    if hurricanes[name]['Year'] == year:
      hurricane_by_year.append(hurricanes[name])
  return hurricane_by_year

print(hurricane_by_year_dict(1967))

# 4
# Counting Damaged Areas
# create dictionary of areas to store the number of hurricanes involved in

print("---")
print("Areas affected")
print("---")

areas_count={}

for areas in areas_affected:
    for i in areas:
        if i not in areas_count:
            areas_count[i] = 1
        else:
            areas_count[i] += 1
print(areas_count)


# 5 
# Calculating Maximum Hurricane Count
# find most frequently affected area and the number of hurricanes involved in
print("---")
print("Most affected")
print("---")
def find_most_affected(areas_count):

    max_area = ''
    max_area_count = 0

    for area in areas_count:
        if areas_count[area] > max_area_count:
            max_area = area
            max_area_count = areas_count[area]
    return max_area, max_area_count

max_area, max_area_count = find_most_affected(areas_count)
print(max_area, max_area_count)


# 6
# Calculating the Deadliest Hurricane
# find highest mortality hurricane and the number of deaths

print("---")
print("Deadliest Hurricane")
print("---")

def find_most_deadly(hurricanes):

    max_mortality_cane = ''
    max_mortality = 0

    for i in hurricanes:
        if hurricanes[i]['Deaths'] > max_mortality:
            max_mortality_cane = i
            max_mortality = hurricanes[i]['Deaths']
    return max_mortality_cane, max_mortality

max_mortality_cane, max_mortality = find_most_deadly(hurricanes)
print(max_mortality_cane, max_mortality)

# 7
# Rating Hurricanes by Mortality
# categorize hurricanes in new dictionary with mortality severity as key

print("---")
print("Mortality rates")
print("---")

mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}

def mortality(hurricanes):
  hurricanes_by_mortality = {0:[],1:[],2:[],3:[],4:[],5:[]}

  for hurricane in hurricanes:
    rate = 0
    deaths = hurricanes[hurricane]['Deaths']
    
    if deaths == 0:
      rate = 0
    elif deaths > 0 and deaths < 100:
      rate = 1
    elif deaths >= 100 and deaths < 500:
      rate = 2
    elif deaths >= 500 and deaths < 1000:
      rate = 3
    elif deaths >=1000 and deaths < 10000:
      rate = 4
    else: 
      rate = 5
    
    if rate not in hurricanes_by_mortality: 
      hurricanes_by_mortality[rate] = hurricanes[hurricane]
    else:
      hurricanes_by_mortality[rate].append(hurricanes[hurricane])
  
  return hurricanes_by_mortality
hurricanes_by_mortality = mortality(hurricanes)
print(hurricanes_by_mortality)

# 8 Calculating Hurricane Maximum Damage
# find highest damage inducing hurricane and its total cost
print("---")
print("Highest damage")
print("---")

def highest_damage_hurricane(hurricanes):
    max_damage_cane = ''
    max_damage = 0

    for i in hurricanes:
      if hurricanes[i]['Damage'] == "Damages not recorded":
        continue
      elif hurricanes[i]['Damage'] > max_damage:
            max_damage_cane = i
            max_damage = hurricanes[i]['Deaths']
    return max_damage_cane, max_damage

max_damage_cane, max_damage = highest_damage_hurricane(hurricanes)
print(max_damage_cane, max_damage)

# 9
# Rating Hurricanes by Damage

print("---")
print("Rating Hurricanes by Damage")
print("---")

damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
# categorize hurricanes in new dictionary with damage severity as key

def damage_rating(hurricanes):
  damage_ratings = {0:[],1:[],2:[],3:[],4:[],5:[]}

  for hurricane in hurricanes:
    rate = 0
    damage = hurricanes[hurricane]['Damage']
    
    if damage == "Damages not recorded":
      continue
    elif damage >= 0 and damage < 100000000:
      rate = 1
    elif damage >= 100000000 and damage < 1000000000:
      rate = 2
    elif damage >= 1000000000 and damage < 10000000000:
      rate = 3
    elif damage >=10000000000 and damage < 50000000000:
      rate = 4
    else: 
      rate = 5
    
    if rate not in damage_ratings: 
      damage_ratings[rate] = hurricanes[hurricane]
    else:
      damage_ratings[rate].append(hurricanes[hurricane])
  
  return damage_ratings
damage_ratings = damage_rating(hurricanes)
print(damage_ratings)

